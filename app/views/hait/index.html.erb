<!DOCTYPE html>
<head>
  <html lang="ko">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body>
  <!-- Header -->
  <header class="header">
  </header>
  <!-- // Header -->
  <!-- Cover -->
  <section id="cover">
    <h2 class="sr-only">멋쟁이사자처럼 소모임을 소개합니다!</h2>
      <section class="cover-item active">
        <img class="cover_img" src="/images/cover_img.png" alt="커버이미지">
      </section>
  </section>
  <!-- // Cover -->
  <!--search-->
  <section class="section__search container" id="search">
   <div class="input-group row justify-content-center">
      <input type="text" class="form-control col-sm-12 col-md-8 col-lg-8" placeholder="대학교 이름을 입력하세요..." aria-label="Search for...">
      <button class="search_button bg-primary" type="submit"><i class="fa fa-search" aria-hidden="true"></i></button>
    </div>
  </section>
  <!--//search-->
  <!-- About -->
  <section id="about" class="section__about">
    <div class="container">
      <header class="section__header">
        <h2 class="section__title mb-3">
          <span class="section__category mb-2" lang="en">About</span>
          하숙을 잇다 'HA-IT'
        </h2>
      </header>
      <div class="about__data d-flex justify-content-center mb-3">
        <p class="about__datum px-4 px-sm-5">
          <strong class="about__number text-primary timer count-title" data-to="104" data-speed="3000">150</strong>
          전체 하숙집 수
        </p>
        <p class="about__datum px-4 px-sm-5">
          <strong class="about__number text-primary timer count-title" data-to="502" data-speed="3000">83</strong>
          전체 등록된 방 수
        </p>
        <p class="about__datum px-4 px-sm-5">
          <strong class="about__number text-primary timer count-title" data-to="101" data-speed="3000">102</strong>
          전체 이용자 
        </p>
      </div>
      <div class="row justify-content-center">
        <div class="col-12 col-md-10 col-lg-8">
          <p class="section__text">
            오피스텔, 주택, 원룸, 월세, 전세 별로 방을 검색하고 
            구하기 쉬워진 세상. 
            왜 하숙정보는 없는 것인가
            당신의 편리를 위해 'Team 하잇'이 
            발로 뛰어 모은 하숙정보를 지금 바로 즐기세요
          </p>
        </div>
      </div>
    </div>
  </section>
  <!-- // About -->
  <!-- Contact -->
  <section id="contact" class="section__contact">
    <address>
        <div>하숙을 잇다 'Ha-it'</div>
        <div>숙명여자대학교</div>
        <div class="info pt-3">
            <i class="fa fa-mobile"></i>
            <span>818-832-5258</span>
        <div class="info">
            <i class="fa fa-phone"></i>
            <span>+1 123 456 789</span>
        </div>
        <div class="info">
            <i class="fa fa-globe"></i>
            <a href="/">www.ha-it.com</a>
        </div>
        <div class="info pt-3">
            <span>(C) Team Ha-it, All rights reserved</span>
        </div>
    </address>
</section>
<!--contact-->

  <!-- jQuery -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
  <!-- bootstrap -->
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/js/bootstrap.min.js" integrity="sha384-vBWWzlZJ8ea9aCX4pEW3rVHjgjt7zpkNpZk+02D9phzyeVkE+jo0ieGizqPLForn" crossorigin="anonymous"></script>
  <!--counter를 위한 JS-->
<script>
    (function ($) {
       $.fn.countTo = function (options) {
          options = options || {};
          
          return $(this).each(function () {
             // set options for current element
             var settings = $.extend({}, $.fn.countTo.defaults, {
                from:            $(this).data('from'),
                to:              $(this).data('to'),
                speed:           $(this).data('speed'),
                refreshInterval: $(this).data('refresh-interval'),
                decimals:        $(this).data('decimals')
             }, options);
             
             // how many times to update the value, and how much to increment the value on each update
             var loops = Math.ceil(settings.speed / settings.refreshInterval),
                increment = (settings.to - settings.from) / loops;
             
             // references & variables that will change with each update
             var self = this,
                $self = $(this),
                loopCount = 0,
                value = settings.from,
                data = $self.data('countTo') || {};
             
             $self.data('countTo', data);
             
             // if an existing interval can be found, clear it first
             if (data.interval) {
                clearInterval(data.interval);
             }
             data.interval = setInterval(updateTimer, settings.refreshInterval);
             
             // initialize the element with the starting value
             render(value);
             
             function updateTimer() {
                value += increment;
                loopCount++;
                
                render(value);
                
                if (typeof(settings.onUpdate) == 'function') {
                   settings.onUpdate.call(self, value);
                }
                
                if (loopCount >= loops) {
                   // remove the interval
                   $self.removeData('countTo');
                   clearInterval(data.interval);
                   value = settings.to;
                   
                   if (typeof(settings.onComplete) == 'function') {
                      settings.onComplete.call(self, value);
                   }
                }
             }
             
             function render(value) {
                var formattedValue = settings.formatter.call(self, value, settings);
                $self.html(formattedValue);
             }
          });
       };
       
       $.fn.countTo.defaults = {
          from: 0,               // the number the element should start at
          to: 0,                 // the number the element should end at
          speed: 1000,           // how long it should take to count between the target numbers
          refreshInterval: 100,  // how often the element should be updated
          decimals: 0,           // the number of decimal places to show
          formatter: formatter,  // handler for formatting the value before rendering
          onUpdate: null,        // callback method for every time the element is updated
          onComplete: null       // callback method for when the element finishes updating
       };
       
       function formatter(value, settings) {
          return value.toFixed(settings.decimals);
       }
    }(jQuery));
    
    jQuery(function ($) {
      // custom formatting example
      $('.count-number').data('countToOptions', {
       formatter: function (value, options) {
         return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
       }
      });
      
      // start all the timers
      $('.timer').each(count);  
      
      function count(options) {
       var $this = $(this);
       options = $.extend({}, options || {}, $this.data('countToOptions') || {});
       $this.countTo(options);
      }
    });
</script>
</body>
</html>